#! /usr/bin/env python3

import sys
import os
from typing import List

INPUT_DIR: str = "input"
SRC_DIR: str = "src"
MAIN_DIR: str = "app"
MAIN_FILE_NAME: str = "Main.hs"


def write_file(file_path: str, contents: str = "", force: bool = False):
    """
    Creates a file with contents. If it already exists and is non-empty, ask in prompt if it should be created.
    """
    if not force and os.path.exists(file_path) and os.path.getsize(file_path) > 0:
        answer = input(f"File '{file_path}' already existing and is non empty. Should it be overwritten [y/N]? ")
        if not any(map(lambda x: answer is x, ["Y", "y"])):
            print("-> No new file is created.")
            return

    with open(file_path, 'w') as f:
        if contents:
            f.write(contents)


def print_usage():
    usage: str = """. Usage:
.  newday day name
.
.  Positional arguments:
.   day        day number as an integer
.   name       name of the input file to create
"""
    print(usage)


if __name__ == "__main__":

    # parse inputs
    if len(sys.argv) != 3:
        print("Wrong number of arguments.")
        print_usage()
        exit()

    try:
        int(sys.argv[1])
    except ValueError:
        print("First input value has to be an integer.")
        print_usage()
        exit()

    day: str = sys.argv[1]
    if len(day) == 1:
        day = "0" + day

    input_file_name: str = f"{day}_{sys.argv[2]}.txt"
    sample_file_name: str = f"{day}_{sys.argv[2]}-sample.txt"

    src_file_name: str = f"Day{day}.hs"

    # create empty input file
    write_file(os.path.join(INPUT_DIR, input_file_name))

    # create empty sample file
    write_file(os.path.join(INPUT_DIR, sample_file_name))

    # haskell source text
    src_txt: str = \
        f"""module Day{day}
  ( day{day}Part1,
    day{day}Part2,
  )
where

day{day}Part1 :: FilePath -> IO Int
day{day}Part1 fp = do
  contents <- readFile fp
  return $ -1

day{day}Part2 :: FilePath -> IO Int
day{day}Part2 fp = do
  contents <- readFile fp
  return $ -1
"""

    # write haskell source file
    write_file(os.path.join(SRC_DIR, src_file_name), src_txt)

    # read already existing main file.
    assert os.path.exists(os.path.join(MAIN_DIR, MAIN_FILE_NAME)), "No main file found!"
    with open(os.path.join(MAIN_DIR, MAIN_FILE_NAME), 'r') as f:
        content: str = f.read()

    new_contents: List[str] = []

    with open(os.path.join(MAIN_DIR, MAIN_FILE_NAME), 'r+') as f:
        for line in content.splitlines():
            if f"import Day{day}" in line:
                print(f"Module 'Day{day}' already added in main file."
                      f" Please remove module manually or use different day.\n"
                      f"-> Nothing will be added to the main file.")
                exit()

            if "System.Environment" in line:
                new_contents.append(f"import Day{day}")
            elif "type Solution" in line:
                new_contents.extend(
                    [
                        f"inputDay{day} :: FilePath",
                        f"inputDay{day} = \"{INPUT_DIR}/{input_file_name}\"",
                        f"",
                        f"sampleDay{day} :: FilePath",
                        f"sampleDay{day} = \"{INPUT_DIR}/{input_file_name}\"",
                        f""
                    ]
                )
            elif "printSolutions :: IO ()" in line:
                # add comma:
                new_contents[-4] = new_contents[-4] + ","
                to_insert: List[str] = [
                    f"    ( day{day}Part1 sampleDay{day},",
                    f"      day{day}Part2 sampleDay{day}",
                    f"    )"
                ]
                for s in to_insert:
                    new_contents.insert(len(new_contents) - 3, s)

            new_contents.append(line)

        to_write = '\n'.join(new_contents) + '\n'
        f.write(to_write)
